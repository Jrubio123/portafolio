{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Juan Pablo\\\\Downloads\\\\Cursos\\\\portafolio\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(/*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 6,\n  columnNumber: 13\n}, this));\nconst express = require('express');\nconst {\n  Pool\n} = require('pg'); // Librería para conectarse a Postgres\nconst cors = require('cors');\nconst app = express();\nconst port = 5000;\n\n// Configurar middleware\napp.use(cors());\napp.use(express.json());\n\n// Conexión con Postgres\nconst pool = new Pool({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'mi_basededatos',\n  password: 'hola123',\n  port: 5432\n});\n\n// Ruta para registrar usuarios\napp.post('/api/usuarios', async (req, res) => {\n  const {\n    nombre,\n    usuario,\n    contrasena,\n    fechaNacimiento\n  } = req.body;\n  try {\n    const result = await pool.query('INSERT INTO usuarios (nombre, usuario, contrasena, fecha_nacimiento) VALUES ($1, $2, $3, $4)', [nombre, usuario, contrasena, fechaNacimiento]);\n    res.json({\n      message: 'Usuario registrado exitosamente'\n    });\n  } catch (error) {\n    console.error('Error al registrar usuario:', error);\n    res.status(500).json({\n      message: 'Error al registrar usuario'\n    });\n  }\n});\n\n// Iniciar el servidor\napp.listen(port, () => {\n  console.log(`Servidor corriendo en http://localhost:${port}`);\n});","map":{"version":3,"names":["React","ReactDOM","App","jsxDEV","_jsxDEV","root","createRoot","document","getElementById","render","fileName","_jsxFileName","lineNumber","columnNumber","express","require","Pool","cors","app","port","use","json","pool","user","host","database","password","post","req","res","nombre","usuario","contrasena","fechaNacimiento","body","result","query","message","error","console","status","listen","log"],"sources":["C:/Users/Juan Pablo/Downloads/Cursos/portafolio/src/index.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './App';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(<App />);\r\n\r\nconst express = require('express');\r\nconst { Pool } = require('pg'); // Librería para conectarse a Postgres\r\nconst cors = require('cors');\r\n\r\nconst app = express();\r\nconst port = 5000;\r\n\r\n// Configurar middleware\r\napp.use(cors());\r\napp.use(express.json());\r\n\r\n// Conexión con Postgres\r\nconst pool = new Pool({\r\n    user: 'postgres',\r\n    host: 'localhost',\r\n    database: 'mi_basededatos',\r\n    password: 'hola123',\r\n    port: 5432,\r\n});\r\n\r\n// Ruta para registrar usuarios\r\napp.post('/api/usuarios', async (req, res) => {\r\n    const { nombre, usuario, contrasena, fechaNacimiento } = req.body;\r\n\r\n    try {\r\n        const result = await pool.query(\r\n            'INSERT INTO usuarios (nombre, usuario, contrasena, fecha_nacimiento) VALUES ($1, $2, $3, $4)',\r\n            [nombre, usuario, contrasena, fechaNacimiento]\r\n        );\r\n        res.json({ message: 'Usuario registrado exitosamente' });\r\n    } catch (error) {\r\n        console.error('Error al registrar usuario:', error);\r\n        res.status(500).json({ message: 'Error al registrar usuario' });\r\n    }\r\n});\r\n\r\n// Iniciar el servidor\r\napp.listen(port, () => {\r\n    console.log(`Servidor corriendo en http://localhost:${port}`);\r\n});\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,kBAAkB;AACvC,OAAOC,GAAG,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,IAAI,GAAGJ,QAAQ,CAACK,UAAU,CAACC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC;AACjEH,IAAI,CAACI,MAAM,cAACL,OAAA,CAACF,GAAG;EAAAQ,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,CAAC;AAEpB,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAM;EAAEC;AAAK,CAAC,GAAGD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAChC,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACH,IAAI,CAAC,CAAC,CAAC;AACfC,GAAG,CAACE,GAAG,CAACN,OAAO,CAACO,IAAI,CAAC,CAAC,CAAC;;AAEvB;AACA,MAAMC,IAAI,GAAG,IAAIN,IAAI,CAAC;EAClBO,IAAI,EAAE,UAAU;EAChBC,IAAI,EAAE,WAAW;EACjBC,QAAQ,EAAE,gBAAgB;EAC1BC,QAAQ,EAAE,SAAS;EACnBP,IAAI,EAAE;AACV,CAAC,CAAC;;AAEF;AACAD,GAAG,CAACS,IAAI,CAAC,eAAe,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAC1C,MAAM;IAAEC,MAAM;IAAEC,OAAO;IAAEC,UAAU;IAAEC;EAAgB,CAAC,GAAGL,GAAG,CAACM,IAAI;EAEjE,IAAI;IACA,MAAMC,MAAM,GAAG,MAAMb,IAAI,CAACc,KAAK,CAC3B,8FAA8F,EAC9F,CAACN,MAAM,EAAEC,OAAO,EAAEC,UAAU,EAAEC,eAAe,CACjD,CAAC;IACDJ,GAAG,CAACR,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAAkC,CAAC,CAAC;EAC5D,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACnDT,GAAG,CAACW,MAAM,CAAC,GAAG,CAAC,CAACnB,IAAI,CAAC;MAAEgB,OAAO,EAAE;IAA6B,CAAC,CAAC;EACnE;AACJ,CAAC,CAAC;;AAEF;AACAnB,GAAG,CAACuB,MAAM,CAACtB,IAAI,EAAE,MAAM;EACnBoB,OAAO,CAACG,GAAG,CAAC,0CAA0CvB,IAAI,EAAE,CAAC;AACjE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}